#!/usr/bin/hhvm
<?hh

namespace Tool;

require_once(__DIR__ . '/../tests/mock/MockLogger.php');
require_once(__DIR__ . '/../core/Context.php');

class RouterConfigGenerator {

  private Map<string, string> $m_pathToController = Map{};

  public function generate(): void {
    $projectDir = getenv('PROJECT_DIR');

    if ($projectDir == null)
    {
      echo "PROJECT_DIR environment is not set.\n";
      die;
    }

    $controllerDir = "$projectDir/controller";

    $files = scandir($controllerDir);

    foreach ($files as $file)
    {
      $this->processOneFile($controllerDir, $file);
    }

    $this->writeRouteMap("$projectDir/config/RouteMap.php");
  }

  private function processOneFile(string $dir, string $fileName): void {

    $filePath = "$dir/$fileName";
    $parts = explode('.', $fileName);

    // Skip non-php files.
    if (!is_file($filePath)
      || !is_array($parts)
      || count($parts) != 2
      || $parts[1] != 'php') {
      return;
    }

    $controllerName = $parts[0];

    // Skip base class or interface class.
    if ($controllerName == 'ControllerBase'
      || $controllerName == 'ControllerInterface') {
      return;
    }
    
    $context = $this->createContext();
    require_once($filePath);

    $controllerClassName = '\\Controller\\' . $controllerName;
    $controller = new $controllerClassName($context);

    $controllerPath = $controller->getPath();
    if ($this->m_pathToController->contains($controllerPath)) {
      echo "Duplicate path found for $controllerPath.\n";
      die;
    }
  
    $this->m_pathToController[$controllerPath] = $controllerName;
    echo "Processed [$controllerName] with " . $controller->getPath() . "\n";
  }  

  private function writeRouteMap(string $routeMapPath): void {
    $fh = fopen($routeMapPath, 'w');
    if ($fh === false) {
      die("Unable to open file: $routeMapPath!");
    }

    $content = <<<'HEADER'
<?hh

namespace Config;

# The following class is auto-generated by generateRouterConfig.php.
class RouteMap {

// Defines the routing mapping from the request URI to the controller.
public static ImmMap<string, string> $s_map = ImmMap {

HEADER;

    $count = $this->m_pathToController->count();
    $index = 0;
    foreach ($this->m_pathToController as $path => $controller) {
      $delimiter = (++$index != $count) ? ',' : '';
      $content .= "  \"$path\" => \"$controller\"$delimiter\n";
    } 

    $content .= "};\n\n}\n";

    fwrite($fh, $content);
    fclose($fh);

    echo "Successfully wrote to $routeMapPath\n";
  }

  private function createContext(): \Core\Context {
    return new \Core\Context(
      new \Tests\Mock\MockLogger(),
      new \Core\Request('', new \Core\RequestParams(Map{}))
    );
  }

}

(new RouterConfigGenerator())->generate();
